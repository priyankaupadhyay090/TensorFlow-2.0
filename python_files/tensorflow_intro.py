# -*- coding: utf-8 -*-
"""TensorFlow_Intro.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11OonAIKIMuWk_Fl_3xrrjCQzX9ZfU14j
"""

pip install tensorflow

"""# Scalar, Vector, Matrix, Tensor

- Scaler: 1 real number value
- Vector: 1D (has many values, either real numbers or unknown X, Y..)
- Matix: 2D
- Tensor: 3d...ND

# Importing TensforFlow
"""

# Commented out IPython magic to ensure Python compatibility.
# %tensorflow_version 2.x   # version 2.x selected (available versions are 1.x and 2.x)

import tensorflow as tf  # importing
print(tf.version) # make sure we have version 2.x

"""# How TensorFlow works

It  has 2 main component:
- Graphs
- Sessions

TensoFlow works by building a graph of defined computations. Nothing is computed or stored in this graph. It is simply a way of defining the operations that have been written in Code.

A TensorFlow Sessions allows parts of the graphs to be executed. It allocates memory and resourcea and handles the executation of the operations and computation we have defined.

In some instance , need to run a session to be able to execute parts of the graph we created earlier

# Tensors

"A tensor is a generalization of vectors and matrices to potentially higher dimensions. Internally, TensorFlow represents tensors as n-dimensional arrays of base datatypes." (https://www.tensorflow.org/guide/tensor)

It should't surprise you that tensors are a fundemental apsect of TensorFlow. They are the main objects that are passed around and manipluated throughout the program. Each tensor represents a partialy defined computation that will eventually produce a value. TensorFlow programs work by building a graph of Tensor objects that details how tensors are related. Running different parts of the graph allow results to be generated.

Each tensor has a data type and a shape.

Data Types Include: float32, int32, string and others.

Shape: Represents the dimension of data.

Just like vectors and matrices tensors can have operations applied to them like addition, subtraction, dot product, cross product etc.

In the next sections we will discuss some different properties of tensors. This is to make you more familiar with how tensorflow represnts data and how you can manipulate this data.

# Creating Tensors

- tf.Variable(value,datatype)

- For a full list of datatypes please refer to the following guide.

https://www.tensorflow.org/api_docs/python/tf/dtypes/DType?version=stable
"""

my_string = tf.Variable('My name is Priyanka', tf.string)
my_number = tf.Variable(4, tf.int16)
my_float = tf.Variable(5.6, tf.float64) # we have float16, float32, float64


## these tensor has shape 1 --> means they are Scalar value --> 0 dimension

"""# Rank/Degree of Tensors: number of dimensions : tf.rank() method

- rank(0): scaler (above example)


"""

# rank1 examples: array or list: [] - 1d

rank1_tensor = tf.Variable(['test'], tf.string)

# rank2 example:[[]] - 2d
rank2_tensor = tf.Variable([['test','ok'], ['pia','upa']], tf.string) # both list should have equal number of elements



## to find out rank of a tesnor: tf.rank() method call

tf.rank(rank1_tensor) # output: numpy=1 --> 1D


'''
The rank of a tensor is direclty related to the deepest level of nested lists. 
You can see in the first example ["Test"] is a rank 1 tensor as the deepest level of nesting is 1. 
Where in the second example [['test','ok'], ['pia','upa']] is a rank 2 tensor as the deepest level 
of nesting is 2.

'''

"""# Shape of Tensors


The shape of a tensor is simply the number of elements that exist in each dimension. TensorFlow will try to determine the shape of a tensor but sometimes it may be unknown.

To get the shape of a tensor we use the shape attribute.
"""

rank2_tensor.shape


# output: TensorShape([2, 2]): we have  2D (2 list) and each list has 2 elements
# 2 elements in first dimension (test, ok) 
# and 2 elements in second dimension (pia, upa)

rank2 = tf.Variable([['test','ok', 'yes'], ['pia','upa', 'opa']], tf.string)
rank2.shape

# TensorShape([2, 3]) : 2 = 2D. 3 = each dimension has 3 elements

rank1_tensor.shape



"""# Changing shape 

### the number of elements in the reshaoed tensor MUST match the number in original

- The number of elements of a tensor is the product of the sizes of all its shapes. There are often many shapes that have the same number of elements, making it convient to be able to change the shape of a tensor.


"""

tensor1 = tf.ones([1,2,3]) # 1 interios list, 2 inside list and each list have 3 elements --> all values are 1
print(tensor1)

# now the above examples have total 6 elements --> we can reshape this tensor in any other shape but elemetns would be 6 always 

tensor2 = tf.reshape(tensor1, [2,3,1]) # 2 list = 3 list inside of each these list and each inside 3 list and one elements
print(tensor2)

tensor3 = tf.reshape(tensor2, [3, -1]) # -1 tells the tensor to calculate the size of the dimension in that place by itself. it will reshape int [3,2]
print(tensor3)

"""# Slicing Tensors

- Slice operator can be used on tensors to select specific axes or elements.

When we slice or select elements from a tensor, we can use comma seperated values inside the set of square brackets. Each subsequent value refrences a different dimension of the tensor.

Ex: tensor[dim1, dim2, dim3]




"""

# Creating a 2D tensor
matrix = [[1,2,3,4,5],
          [6,7,8,9,10],
          [11,12,13,14,15],
          [16,17,18,19,20]]

tensor = tf.Variable(matrix, dtype=tf.int32) 
print(tf.rank(tensor))
print(tensor.shape)

# Now lets select some different rows and columns from our tensor

three = tensor[0,2]  # selects the 3rd element from the 1st row
print(three)  # -> 3

row1 = tensor[0]  # selects the first row
print(row1)

column1 = tensor[:, 0]  # selects the first column
print(column1)

row_2_and_4 = tensor[1::2]  # selects second and fourth row
print(row_2_and_4)

column_1_in_row_2_and_3 = tensor[1:3, 0]
print(column_1_in_row_2_and_3)

"""# Types of Tensors

There are diffent types of tensors. These are the most used.

- Variable (mutable)
- Constant (immuttable)
- Placeholder (immuttable)
- SparseTensor (immuttable)

With the execption of ```Variable``` all these tensors are immuttable, meaning their value may not change during execution.

For now, it is enough to understand that we use the Variable tensor when we want to potentially change the value of our tensor.

# Evaluating Tensors

- there will be some times when we need to evaluate the tesnors.In other words, gets it's value.Tesnors represent a partially complete computation, sometimes we need to run ```sessions``` to evaluate the tensor.

- there are many ways to do it but here is the simplest one
"""

with tf.Session() as sess: # create a sesion using the default graph
  tensor_name.eval()

"""till now, we were using the dafualt grpah which holls all the operations. We can also create our own graph

### Sources
Most of the information is taken direclty from the TensorFlow website which can be found below.

https://www.tensorflow.org/guide/tensor
"""



