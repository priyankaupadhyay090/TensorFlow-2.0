# -*- coding: utf-8 -*-
"""Data_Agumentation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KOFebd5DT1gXdz52JgmcqDChNZtKMqAZ

# How to work for small dataset (cifar 60000 is still small dataset, CNN is trained on millions images)
In the situation where you don't have millions of images it is difficult to train a CNN from scratch that performs very well. This is why we will learn about a few techniques we can use to train CNN's on small datasets of just a few thousand images. 
- 1. **Data agumentation** to avoid overfitting and increase number of dataset
- 2. **Pre-trained model** if both dataset are similar with  **Fine tunning** by using transfer learning from one model (trained on largse dataset) to new model(which has only small dataset)

###1. **Data Augmentation**
To avoid overfitting and create a larger dataset from a smaller one we can use a technique called data augmentation. This is simply performing random transofrmations on our images so that our model can generalize better. 
- image compression
- rotate
- flipping: horizontal flip, vertical flip 
- cropping
- color space transformation: RGB TO HSV, RGB TO GREY
- translation
- image streteches
- noise injection
"""

from keras.preprocessing import image
from keras.preprocessing.image import  ImageDataGenerator


# create a data generator object which can transform the image
data_generator = ImageDataGenerator(rotation_range= 40, width_shift_range=0.2,
                                    height_shift_range=0.2, shear_range=0.2,
                                    zoom_range=0.2, horizontal_flip=True, fill_mode= 'nearest')

# taking an image as an example to transform
img_example = test_images[20]
img = image.img_to_array(img_example) # image to numpy array convert
img = img.reshape((1,) + img.shape) # (1,) python will figure out what shape shoud be according to original img.shape


i = 0
for batch in data_generator.flow(img, save_prefix='test', save_format='jpeg'): #this loops runs forever until we break, saving images to current directory with specified prefix
    plt.figure(i)
    plot = plt.imshow(image.img_to_array(batch[0]))
    i+= 1
    if i> 7: # show 7 images only from transformation
      break

plt.show()

"""##2. **Pre-trained Models**

check Pre_Trained_CNN_Image_Classification_with_Fine_tuning_for_small_dataset.ipynb



"""









